<?xml version="1.0" encoding="UTF-8"?>
<project name="build-macros">

  <property environment="env" />
  
  <property name="delete.verbose" value="true"/>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${buildsupport.dir}/lib/ant-contrib-1.0b3.jar" />

  <taskdef resource="flexTasks.tasks" classpath="${flex.dir.home}/ant/lib/flexTasks.jar" />

  <taskdef resource="flexUnitTasks.tasks" classpath="${buildsupport.dir}/lib/flexunit/flexUnitTasks-${flexunit.version}.jar" />

  <!--taskdef name="p4label" classname="org.apache.tools.ant.taskdefs.optional.perforce.P4Label" / -->

  <condition property="isMac">
    <os family="mac" />
  </condition>

  <condition property="isWindows">
    <os family="windows" />
  </condition>

  <macrodef name="copy-config">
    <attribute name="config-name" default="${compile.config.name}"/>
    <attribute name="config-path" default="${config.compiler.additional}"/>
    <attribute name="copy-path" default="${build.dir.output}"/>
    <sequential>
      <var name="resolved.file.name" value="@{config-name}-compile-config.xml"/>
      <var name="target.config" value="@{config-path}/${resolved.file.name}"/>
      <var name="config.copy" value="@{copy-path}/generated-compile-config.xml"/>
      <copy file="${target.config}" tofile="${config.copy}" overwrite="true" verbose="true"/>
      <replace file="${config.copy}" token="[buildsupport]" value="${buildsupport.dir}"/>
      <replace file="${config.copy}" token="[project-dir]" value="${project.dir}"/>
      <replace file="${config.copy}" token="[flex-home]" value="${flex.dir.home}"/>
    </sequential>
  </macrodef>


  <!-- compile using mxmlc -->
  <macrodef name="compile-mxmlc" description="MXMLC MACRO">
    <attribute name="main-file" />
    <attribute name="output-file" />
    <attribute name="flex-dir-home" />
    <attribute name="config-name" default="flex"/>
    <attribute name="compiler-config"
      default="@{flex-dir-home}/frameworks/flex-config.xml" />
    <attribute name="compiler-args"/>
    <attribute name="debug" default="false" />
    <sequential>
      <var name="FLEX_HOME" value="@{flex-dir-home}" />
      <mxmlc
        file="@{main-file}"
        output="@{output-file}"
        allow-source-path-overlap="true"
        headless-server="true"
        configname="@config-name"
        debug="@{debug}">
        <!-- could add license, mostly needed for automation builds -->
        <!--license
          product="${flashbuilderVersion}"
          serial-number="${flashbuilderSerial}" /-->
        <load-config filename="@{compiler-config}" />
        <load-config filename="@{compiler-args}" />
      </mxmlc>
      <echo message="compile-mxmlc :: finished"/>
    </sequential>
  </macrodef>


  <!-- marco to create html wrapper for web apps -->
  <macrodef name="create-flex-html-wrapper">
    <attribute name="swf" />
    <attribute name="application" />
    <attribute name="html-page-title" />
    <attribute name="package-output-dir" default="${build.dir.output.package}"/>
    <attribute name="output-file-name" default="index.html" />
    <sequential>
      <var name="FLEX_HOME" value="${flexSDK}" />
      <var name="player-version" value="10.1" />
      <html-wrapper
        application="@{application}"
        title="@{html-page-title}"
        swf="@{swf}"
        output="@{package-output-dir}"
        height="100%"
        width="100%"
        bgcolor="white"
        version-detection="true"
        version-major="${player-version}"
        version-minor="${player-version}"
        version-revision="${player-version}"
        express-install="true" history="false"
        file="@{output-file-name}" />
    </sequential>
  </macrodef>


  <macrodef name="run-flexunit" description="run-flexunit : the flex unit macro ">
    <attribute name="player" default="flash"/>
    <attribute name="to-dir"/>
    <attribute name="source-dir"/>
    <attribute name="test-dir-source"/>
    <attribute name="additional-compiler-config"/>
    <attribute name="flex-dir-home"/>
    <attribute name="generate-report" default="true"/>
    <attribute name="report-dir" default="@{to-dir}/report"/>
    <sequential>
      <!-- WARNING: flexunit requires the flex home path to not have any spaces -->
      <var name="FLEX_HOME" value="@{flex-dir-home}/"/>
      <mkdir dir="@{report-dir}"/>
      <!-- TODO:  FlexUnit working directory is hardcoded in source.  need fix then re-add workingDir="@{working-dir}/" -->
      <flexunit player="@{player}" toDir="@{to-dir}/" haltonfailure="false" verbose="false" localTrusted="true" headless="false" debug="true">
        <!-- DONE: Update FlexUnit source to use compiler config and replace with below.  Then remove the source and library dir references.  -->
        <load-config filename="@{additional-compiler-config}"/>
        <source dir="@{source-dir}"/>
        <testSource dir="@{test-dir-source}">
          <include name="**/*Test.as"/>
        </testSource>
      </flexunit>
      <junitreport todir="@{report-dir}">
        <fileset dir="@{to-dir}">
          <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="@{report-dir}/html"/>
      </junitreport>
    </sequential>
  </macrodef>


  <macrodef name="build-run-flexunit">
    <attribute name="player" default="flash"/>
    <sequential>
      <var name="config.copy" value="${build.dir.output.unit}/generated-flexunit-config.xml"/>
      <copy file="${unit.config.compiler.additional}" tofile="${config.copy}" overwrite="true"/>
      <replace file="${config.copy}" token="[buildsupport]" value="${buildsupport.dir}"/>
      <replace file="${config.copy}" token="[project-dir]" value="${project.dir}"/>
      <run-flexunit
        to-dir="${unit.dir.to}"
        player="@{player}"
        source-dir="${unit.dir.source}"
        test-dir-source="${unit.dir.source.test}"
        additional-compiler-config="${config.copy}"
        flex-dir-home="${flex.dir.home}"
        report-dir="${unit.dir.to.report}"/>
      <cleanup-run-flexunit/>
      <echo message="build-run-flexunit :: finished"/>
    </sequential>
  </macrodef>


    <!-- cleanup-run-flexunit -->
    <macrodef name="cleanup-run-flexunit" description="clean up for run-flexunit">
      <sequential>
        <delete verbose="${delete.verbose}">
          <fileset dir="${project.dir}">
            <include name="TestRunner**.*" />
            <include name="flexUnitDescriptor.xml" />
          </fileset>
        </delete>
      </sequential>
    </macrodef>


  <!-- cleanup-flexunit-reports -->
  <macrodef name="cleanup-flexunit-reports">
    <sequential>
      <delete includeemptydirs="true" verbose="${delete.verbose}">
        <fileset dir="${build.dir.output.report}">
          <include name="**/*" />
        </fileset>
      </delete>
    </sequential>
  </macrodef>


  <!-- cleanup-generated-output -->
  <macrodef name="cleanup-generated-output">
    <sequential>
      <delete includeemptydirs="true" verbose="${delete.verbose}">
        <fileset dir="${build.dir.output}">
          <include name="**/*" />
        </fileset>
      </delete>
    </sequential>
  </macrodef>


  <!-- cleanup-build-only-output -->
  <macrodef name="cleanup-build">
    <sequential>
      <delete includeemptydirs="true" verbose="${delete.verbose}" failonerror="false">
        <fileset dir="${build.dir.output.binary}">
          <include name="**/*" />
        </fileset>
      </delete>
    </sequential>
  </macrodef>


  <!-- cleanup-package-only-output -->
  <macrodef name="cleanup-package">
    <sequential>
      <delete includeemptydirs="true" verbose="${delete.verbose}" failonerror="false">
        <fileset dir="${build.dir.output.package}">
          <include name="**/*" />
        </fileset>
      </delete>
    </sequential>
  </macrodef>

  <!-- copy runtime shared libraries -->
  <macrodef name="copy-flex-rsls">
    <attribute name="flex-dir-home-rsl" />
    <attribute name="output-dir" />
    <sequential>
      <mkdir dir="@{output-dir}" />
      <copy todir="@{output-dir}" overwrite="true">
        <fileset dir="@{flex-dir-home-rsl}" includes="**/*.swf" />
      </copy>
    </sequential>
  </macrodef>


  <!-- macro run-p4label
  <macrodef name="run-p4label">
    <attribute name="build-label" />
    <attribute name="label-view" />
    <attribute name="build-desc" default="@{build-label}" />
    <sequential>
      <p4label port="${p4.port}" user="${p4.user}" client="${p4.workspace}" view="@{label-view}" name="@{build-label}" desc="@{build-desc}" />
    </sequential>
  </macrodef -->


  <!-- macro compc compile: difficult to make compc flexible :( -->
  <macrodef name="compc-compile">
    <attribute name="locale" default="en_US"/>
    <attribute name="flex-dir-home"/>
    <attribute name="src-path"/>
    <attribute name="output-file"/>
    <attribute name="framework-config-name" default="flex"/>
    <attribute name="compiler-config"
      default="@{flex-dir-home}/frameworks/@{framework-config-name}-config.xml"/>
    <attribute name="compiler-args"/>
      <sequential>
          <var name="FLEX_HOME" value="@{flex-dir-home}"/>
          <compc locale="@{locale}"
            output="@{output-file}">
            <source-path path-element="@{src-path}"/>
            <include-sources dir="@{src-path}" includes="*" />
            <load-config filename="@{compiler-config}"/>
            <load-config filename="@{compiler-args}"/>
          </compc>
      <echo message="compc-compile :: macro finished"/>
      </sequential>
  </macrodef>


  <!-- run using adl -->
  <macrodef name="run-adl">
    <attribute name="flex-dir-home" />
    <attribute name="app-xml" />
    <attribute name="root-dir" />
    <sequential>
      <if>
        <equals arg1="${isMac}" arg2="true" />
        <then>
          <property name="adl" value="@{flex-dir-home}/bin/adl" />
        </then>
        <elseif>
          <equals arg1="${isWindows}" arg2="true" />
          <then>
            <property name="adl" value="@{flex-dir-home}/bin/adl.exe" />
          </then>
        </elseif>
      </if>
      <exec executable="${adl}">
        <arg value="@{app-xml}" />
        <arg value="@{root-dir}" />
      </exec>
    </sequential>
  </macrodef>


  <!-- package using adt -->
  <macrodef name="package-adt">
    <attribute name="flex-dir-home" default="${flex.dir.home}"/>
    <attribute name="target" 
      default="air"/>
    <attribute name="storetype" 
      default="${keystore.type}"/>
    <attribute name="keystore" 
      default="${keystore.path}/${keystore.name}"/>
    <attribute name="storepass" 
      default="${keystore.password}"/>
    <attribute name="package-output-dir" 
      default="${build.dir.output.package}"/>
    <attribute name="provisioning-profile" default=""/>
    <attribute name="package-output-file" 
      default="${app.file.output}"/>
    <attribute name="app-descriptor" 
      default="${build.dir.output.binary}/${project.name}-app.xml" />
    <attribute name="package-input"/>
    <attribute name="additional-input" 
      default="${app.assets.dir}"/>
    <sequential>
      <mkdir dir="@{package-output-dir}"/>
      <var name="provisioning-arg" value=""/>
      <var name="provisioning-path" value=""/>
      <if>
         <or>
         <equals arg1="@{target}" arg2="ipa-test"/> 
         <equals arg1="@{target}" arg2="ipa-debug"/>
         <equals arg1="@{target}" arg2="ipa-app-store"/>
         <equals arg1="@{target}" arg2="ipa-ad-hoc"/>
          </or> 
       <then>
         <var name="provisioning-arg" value="-provisioning-profile"/> 
         <var name="provisioning-path" value="@{provisioning-profile}" />
       </then>
     </if>
      <echo message="package-adt :: calling adt in dir ${build.dir.output.binary}"/>
      <echo message="package-adt :: args:"/>
      <echo message="  -package"/>
      <echo message="  -target @{target}"/>
      <echo message="  -storetype @{storetype}"/>
      <echo message="  -keystore @{keystore}"/>
      <echo message="  -storepass @{storepass}"/>
      <echo message="  ${provisioning-arg}"/>
      <echo message="  ${provisioning-path}"/>
      <echo message="  @{package-output-dir}/@{package-output-file} (output)"/>
      <echo message="  @{app-descriptor} (descriptor)"/>
      <echo message="  @{package-input} (input)"/>
      <echo message="  -C"/>
      <echo message="  ${build.src.dir}"/>
      <echo message="  @{additional-input}"/>
      <echo message="-----------------------------------" />
      <echo message=""/>
      <java
        jar="@{flex-dir-home}/lib/adt.jar"
        dir="${build.dir.output.binary}"
        fork="true" failonerror="true">
        <arg value="-package"/>
        <arg value="-target"/>
        <arg value="@{target}"/>
        <arg value="-storetype"/>
        <arg value="@{storetype}"/>
        <arg value="-keystore"/>
        <arg value="@{keystore}"/>
        <arg value="-storepass"/>
        <arg value="@{storepass}"/>
        <arg value="${provisioning-arg}"/>
        <arg value="${provisioning-path}"/>
        <arg value="@{package-output-dir}/@{package-output-file}"/>
        <arg value="@{app-descriptor}"/>
        <arg value="@{package-input}"/>
        <arg value="-C"/>
        <arg value="${build.src.dir}"/>
        <arg value="@{additional-input}"/>
        <!-- could override additional input with more -C args if needed -->
      </java>
    <echo message="package-adt :: finished"/>
    </sequential>
  </macrodef>


  <!-- create an app descriptor -->
  <macrodef name="generate-app-descriptor">
    <attribute name="descriptor-template" default="${app.descriptor}"/>
    <attribute name="descriptor-tofile" default="${build.dir.output.binary}/${project.name}-app.xml"/>
    <attribute name="replace-token" default="${app.descriptor.token.default}"/>
    <attribute name="replace-content" default="${app.binary.name}"/>
    <sequential>
      <copy file="@{descriptor-template}" tofile="@{descriptor-tofile}" overwrite="true"/>
      <replace file="@{descriptor-tofile}" token="@{replace-token}" value="@{replace-content}" />
    </sequential>
  </macrodef>
  
  <macrodef name="stage-package-contents">
    <sequential>
      <echo message="stage-package-contents :: currently not implemented :)"/>
    </sequential>
  </macrodef>


</project>
